//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""70876cf5-07a9-425d-be4c-3255e4b3c7c3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""6035e8a4-b9f7-4785-bcf3-33df739406fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b64435fa-78c9-401a-8423-9860a75d4a52"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7e308fa-00b4-4386-b389-97700db30fb2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24fbd972-3fcf-45f8-bcfa-f0ac8f108902"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""81ef2acb-a640-419f-87f3-c0393c11efbc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aefb1f1f-0f59-45e0-9834-439df42724bf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BallMove"",
            ""id"": ""ad7cdb3d-a71d-4dca-8b01-ef4919c997e7"",
            ""actions"": [
                {
                    ""name"": ""BallMovement"",
                    ""type"": ""Button"",
                    ""id"": ""73b541be-ff7e-4557-b92f-6827c1841b4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d3effc3-35ec-4517-a533-f2904b09b9b9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BallMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Timeout"",
            ""id"": ""28da22f8-bbf4-4deb-a6d3-c2f834e1658c"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""04abe995-0d7f-4b86-8054-034280ace301"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eae4d9f0-bc0c-4199-abf5-bbd0a27c6d23"",
                    ""path"": ""<Keyboard>/#(P)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMove
        m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
        m_PlayerMove_Movement = m_PlayerMove.FindAction("Movement", throwIfNotFound: true);
        // BallMove
        m_BallMove = asset.FindActionMap("BallMove", throwIfNotFound: true);
        m_BallMove_BallMovement = m_BallMove.FindAction("BallMovement", throwIfNotFound: true);
        // Timeout
        m_Timeout = asset.FindActionMap("Timeout", throwIfNotFound: true);
        m_Timeout_Pause = m_Timeout.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMove
    private readonly InputActionMap m_PlayerMove;
    private IPlayerMoveActions m_PlayerMoveActionsCallbackInterface;
    private readonly InputAction m_PlayerMove_Movement;
    public struct PlayerMoveActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMove_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMoveActions instance)
        {
            if (m_Wrapper.m_PlayerMoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);

    // BallMove
    private readonly InputActionMap m_BallMove;
    private IBallMoveActions m_BallMoveActionsCallbackInterface;
    private readonly InputAction m_BallMove_BallMovement;
    public struct BallMoveActions
    {
        private @PlayerInput m_Wrapper;
        public BallMoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @BallMovement => m_Wrapper.m_BallMove_BallMovement;
        public InputActionMap Get() { return m_Wrapper.m_BallMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallMoveActions set) { return set.Get(); }
        public void SetCallbacks(IBallMoveActions instance)
        {
            if (m_Wrapper.m_BallMoveActionsCallbackInterface != null)
            {
                @BallMovement.started -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnBallMovement;
                @BallMovement.performed -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnBallMovement;
                @BallMovement.canceled -= m_Wrapper.m_BallMoveActionsCallbackInterface.OnBallMovement;
            }
            m_Wrapper.m_BallMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BallMovement.started += instance.OnBallMovement;
                @BallMovement.performed += instance.OnBallMovement;
                @BallMovement.canceled += instance.OnBallMovement;
            }
        }
    }
    public BallMoveActions @BallMove => new BallMoveActions(this);

    // Timeout
    private readonly InputActionMap m_Timeout;
    private ITimeoutActions m_TimeoutActionsCallbackInterface;
    private readonly InputAction m_Timeout_Pause;
    public struct TimeoutActions
    {
        private @PlayerInput m_Wrapper;
        public TimeoutActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Timeout_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Timeout; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimeoutActions set) { return set.Get(); }
        public void SetCallbacks(ITimeoutActions instance)
        {
            if (m_Wrapper.m_TimeoutActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_TimeoutActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_TimeoutActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_TimeoutActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_TimeoutActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public TimeoutActions @Timeout => new TimeoutActions(this);
    public interface IPlayerMoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IBallMoveActions
    {
        void OnBallMovement(InputAction.CallbackContext context);
    }
    public interface ITimeoutActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
